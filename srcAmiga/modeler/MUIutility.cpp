/***************
 * PROGRAM:       Modeler
 * NAME:          MUIutility.cpp
 * DESCRIPTION:   MUI utility functions
 * AUTHORS:       Andreas Heumann
 * HISTORY:
 *    DATE     NAME  COMMENT
 *    10.12.95 ah    initial release
 *    31.01.97 ah    added rectangle icon
 *    21.02.97 ah    added edit points icon
 *    01.05.97 ah    added add points icon
 ***************/

#include <stdio.h>
#include <string.h>

#include <dos/dos.h>
#include <graphics/gfx.h>
#include <graphics/gfxmacros.h>
#include <graphics/gfxbase.h>

#ifdef __STORM__
	#include <pragma/graphics_lib.h>
	#include <pragma/dos_lib.h>
#endif

#ifndef TYPEDEFS_H
#include "typedefs.h"
#endif

#ifndef MUIDEFS_H
#include "MUIdefs.h"
#endif

#ifndef MUIUTILITY_H
#include "MUIutility.h"
#endif

#ifndef PREFS_H
#include "prefs.h"
#endif

#ifndef UTILITY_H
#include "utility.h"
#endif

#pragma chip

static UBYTE newdata[] =
{
	0x00,0x00,0x00,0x00,0x1f,0xe0,0x10,0x50,0x10,0x48,0x10,0x78,0x10,0x08,
	0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x1f,0xf8,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xa0,0x0f,0xb0,0x0f,0x80,0x0f,0xf0,
	0x0f,0xf0,0x0f,0xf0,0x0f,0xf0,0x0f,0xf0,0x0f,0xf0,0x0f,0xf0,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE loaddata[] =
{
	0x00,0x00,0x00,0x00,0x7f,0xf8,0x60,0x18,0x60,0x18,0x60,0x00,0x60,0x08,
	0x60,0x7c,0x7e,0x7e,0x60,0x7f,0x60,0x7e,0x6c,0x1c,0x6c,0x08,0x7f,0xf8,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0xe8,0x00,0x00,0x1f,0x88,0x00,0x7c,
	0x1e,0xfe,0x00,0xff,0x1e,0xfe,0x1e,0x8c,0x13,0x08,0x13,0xc0,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE savedata[] =
{
	0x00,0x00,0x00,0x00,0x7f,0xf8,0x60,0x18,0x60,0x08,0x60,0x08,0x60,0x10,
	0x60,0x3f,0x7f,0x7f,0x60,0x7f,0x60,0x3e,0x6c,0x18,0x6c,0x08,0x7f,0xf8,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0xe8,0x00,0x00,0x1f,0xd0,0x00,0x3e,
	0x1f,0x7e,0x00,0xfe,0x1f,0x3e,0x1f,0x90,0x13,0xc0,0x13,0xc0,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE frontdata[] =
{
	0x00,0x00,0x00,0x00,0x0f,0xf0,0x0f,0xf0,0x0c,0x00,0x0c,0x00,0x0c,0x00,
	0x0f,0xc0,0x0f,0xc0,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE rightdata[] =
{
	0x00,0x00,0x00,0x00,0x0f,0xe0,0x0f,0xf0,0x0c,0x30,0x0c,0x30,0x0c,0x30,
	0x0f,0xf0,0x0f,0xe0,0x0f,0x80,0x0d,0xc0,0x0c,0xe0,0x0c,0x70,0x0c,0x30,
	0x00,0x00,0x00,0x00,
};

static UBYTE topdata[] =
{
	0x00,0x00,0x00,0x00,0x0f,0xf0,0x0f,0xf0,0x01,0x80,0x01,0x80,0x01,0x80,
	0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,
	0x00,0x00,0x00,0x00,
};

static UBYTE fourdata[] =
{
	0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
	0x7f,0xfe,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
	0x01,0x00,0x00,0x00,
	0x00,0x00,0x3c,0xb8,0x18,0xb4,0x18,0xb8,0x18,0xb0,0x18,0xb0,0x00,0x80,
	0x00,0x00,0x7e,0xfe,0x00,0x80,0x3c,0xb8,0x30,0xb4,0x38,0xb8,0x30,0xb8,
	0x30,0xb4,0x00,0x00,
};

static UBYTE perspdata[] =
{
	0x00,0x00,0x00,0x00,0x0f,0xe0,0x0f,0xf0,0x0c,0x30,0x0c,0x30,0x0c,0x30,
	0x0f,0xf0,0x0f,0xe0,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE cameradata[] =
{
	0x00,0x00,0x00,0x00,0x18,0xc0,0x25,0x20,0x42,0x10,0x42,0x10,0x25,0x20,
	0x18,0xc0,0x7f,0xe2,0x40,0x2e,0x40,0x32,0x40,0x22,0x40,0x32,0x40,0x2e,
	0x7f,0xe2,0x00,0x00,
};

static UBYTE boundingdata[] =
{
	0x00,0x00,0x7f,0xfe,0x60,0x06,0x50,0x0a,0x4f,0xf2,0x48,0x12,0x48,0x12,
	0x48,0x12,0x48,0x12,0x48,0x12,0x48,0x12,0x4f,0xf2,0x50,0x0a,0x60,0x06,
	0x7f,0xfe,0x00,0x00,
};

static UBYTE wiredata[] =
{
	0x00,0x00,0x07,0xe0,0x0c,0x70,0x15,0xa8,0x26,0x24,0x7f,0xfe,0x4c,0x66,
	0x54,0xaa,0x55,0x2a,0x66,0x32,0x7f,0xfe,0x26,0x24,0x15,0xa8,0x0c,0x70,
	0x07,0xe0,0x00,0x00,
};

static UBYTE soliddata[] =
{
	0x00,0x00,0x07,0xe0,0x1a,0xb8,0x20,0x14,0x20,0x2c,0x40,0x06,0x40,0x0a,
	0x40,0x06,0x60,0x0a,0x40,0x06,0x68,0x0a,0x30,0x1c,0x2a,0xa4,0x1d,0xd8,
	0x07,0xe0,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x40,0x07,0x80,0x17,0x40,
	0x0f,0x80,0x15,0x40,0x02,0x00,0x05,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE rotatedata[] =
{
	0x00,0x00,0x00,0x00,0x03,0xe0,0x0f,0xf8,0x1f,0x7c,0x1c,0x1c,0x38,0x0e,
	0xfe,0x0e,0x7c,0x06,0x38,0x0e,0x10,0x0e,0x04,0x1c,0x1f,0x7c,0x0f,0xf8,
	0x03,0xe0,0x00,0x00,
};

static UBYTE movedata[] =
{
	0x00,0x00,0x00,0xfe,0x00,0x7e,0x00,0x3e,0x00,0x7e,0x00,0xfe,0x01,0xf6,
	0x03,0xe2,0x47,0xc0,0x6f,0x80,0x7f,0x00,0x7e,0x00,0x7c,0x00,0x7e,0x00,
	0x7f,0x00,0x00,0x00,
};

static UBYTE scaledata[] =
{
	0x00,0x00,0x01,0x80,0x07,0xe0,0x1f,0xf8,0x03,0xc0,0x03,0xc0,0x07,0xe0,
	0x07,0xe0,0x07,0xe0,0x0f,0xf0,0x0f,0xf0,0x7f,0xfe,0x1f,0xf8,0x07,0xe0,
	0x01,0x80,0x00,0x00,
};

static UBYTE worldmovedata[] =
{
	0x00,0x00,0x00,0xfe,0x00,0x7e,0x00,0x3e,0x00,0x7e,0x00,0xfe,0x01,0xfe,
	0x02,0x72,0x46,0x52,0x6e,0x72,0x7e,0x52,0x7e,0x02,0x7e,0x22,0x7e,0x52,
	0x7f,0x8c,0x00,0x00,
	0x00,0x00,0x00,0xfe,0x00,0x7e,0x00,0x3e,0x00,0x7e,0x00,0xfe,0x00,0x72,
	0x01,0xac,0x45,0x8c,0x6d,0x8c,0x7d,0xac,0x7d,0xfc,0x7d,0xdc,0x7d,0x8c,
	0x7e,0x00,0x00,0x00,
};

static UBYTE worldrotatedata[] =
{
	0x00,0x00,0x00,0x00,0x03,0xe0,0x0f,0xf8,0x1f,0x7c,0x1c,0x1c,0x39,0x8e,
	0xfe,0x52,0x7e,0x52,0x3a,0x72,0x12,0x52,0x06,0x02,0x1e,0x22,0x0e,0x72,
	0x03,0xec,0x00,0x00,
	0x00,0x00,0x00,0x00,0x03,0xe0,0x0f,0xf8,0x1f,0x7c,0x1c,0x1c,0x38,0x02,
	0xfd,0x8c,0x7d,0x8c,0x39,0x8c,0x11,0xac,0x05,0xfc,0x1d,0xdc,0x0d,0xac,
	0x02,0x60,0x00,0x00,
};

static UBYTE worldscaledata[] =
{
	0x00,0x00,0x01,0x80,0x07,0xe0,0x1f,0xf8,0x03,0xc0,0x03,0xc0,0x07,0xec,
	0x06,0x72,0x06,0x72,0x0e,0x72,0x0e,0x52,0x7e,0x02,0x1e,0x22,0x06,0x72,
	0x01,0x8c,0x00,0x00,
	0x00,0x00,0x01,0x80,0x07,0xe0,0x1f,0xf8,0x03,0xc0,0x03,0xc0,0x06,0x60,
	0x05,0xac,0x05,0xac,0x0d,0x8c,0x0d,0xac,0x7d,0xfc,0x1d,0xdc,0x05,0xac,
	0x00,0x00,0x00,0x00,
};

static UBYTE xdata[] =
{
	0x00,0x00,0x00,0x00,0x0c,0x30,0x0c,0x30,0x06,0x60,0x06,0x60,0x03,0xc0,
	0x01,0x80,0x01,0x80,0x03,0xc0,0x06,0x60,0x06,0x60,0x0c,0x30,0x0c,0x30,
	0x00,0x00,0x00,0x00,
};

static UBYTE ydata[] =
{
	0x00,0x00,0x00,0x00,0x0c,0x30,0x0c,0x60,0x06,0x60,0x06,0xc0,0x03,0xc0,
	0x03,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x06,0x00,0x06,0x00,0x0c,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE zdata[] =
{
	0x00,0x00,0x00,0x00,0x0f,0xf0,0x0f,0xf0,0x00,0x60,0x00,0xc0,0x00,0xc0,
	0x01,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x06,0x00,0x0f,0xf0,0x0f,0xf0,
	0x00,0x00,0x00,0x00,
};

static UBYTE viewdata[] =
{
	0x00,0x00,0x07,0xe0,0x09,0xd0,0x17,0xee,0x66,0x36,0x7c,0x1e,0x5c,0x1e,
	0x6c,0x1a,0x56,0x36,0x6f,0xfa,0x7f,0xfe,0x00,0x00,
	0x00,0x00,0x00,0x00,0x06,0x20,0x08,0x10,0x19,0xc8,0x03,0xe0,0x23,0xe0,
	0x03,0xe0,0x01,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,
};

static UBYTE rectangledata[] =
{
	0x00,0x00,0x7f,0xfe,0x40,0x02,0x7f,0xfa,0x40,0x0a,0x7f,0xea,0x40,0x2a,
	0x40,0x2a,0x40,0x2a,0x40,0x2a,0x40,0x2a,0x40,0x2a,0x40,0x2a,0x40,0x2a,
	0x7f,0xfe,0x00,0x00,
};

static UBYTE editpointsdata[] =
{
	0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE addpointsdata[] =
{
	0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x06,0x00,0x09,0x00,
	0x09,0x00,0x39,0xc0,0x40,0x20,0x40,0x20,0x39,0xe0,0x09,0x00,0x09,0x00,
	0x06,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x06,0x00,
	0x06,0x00,0x06,0x00,0x3f,0xc0,0x3f,0xc0,0x06,0x00,0x06,0x00,0x06,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE editedgesdata[] =
{
	0x00,0x00,0x70,0x00,0x70,0x00,0x78,0x00,0x04,0x00,0x02,0x00,0x01,0x80,
	0x00,0x40,0x00,0x20,0x00,0x1e,0x00,0x0e,0x00,0x0e,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE addedgesdata[] =
{
	0x00,0x00,0x70,0x00,0x70,0x00,0x78,0x00,0x04,0x00,0x06,0x00,0x09,0x80,
	0x09,0x40,0x39,0xe0,0x40,0x3e,0x40,0x2e,0x39,0xee,0x09,0x00,0x09,0x00,
	0x06,0x00,0x00,0x00,
	0x00,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
	0x06,0x00,0x06,0x00,0x3f,0xce,0x3f,0xce,0x06,0x0e,0x06,0x00,0x06,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE editfacesdata[] =
{
	0x00,0x00,0x00,0x1c,0x00,0x1c,0x01,0xfc,0x7e,0x08,0x70,0x08,0x70,0x08,
	0x0c,0x08,0x02,0x08,0x01,0x08,0x00,0x88,0x00,0x68,0x00,0x1c,0x00,0x1c,
	0x00,0x1c,0x00,0x00,
	0x00,0x00,0x00,0x1c,0x00,0x1c,0x00,0x1c,0x71,0xf0,0x7f,0xf0,0x7f,0xf0,
	0x03,0xf0,0x01,0xf0,0x00,0xf0,0x00,0x70,0x00,0x10,0x00,0x1c,0x00,0x1c,
	0x00,0x1c,0x00,0x00,
};

static UBYTE addfacesdata[] =
{
	0x00,0x00,0x00,0x0e,0x00,0x0e,0x00,0xfe,0x3f,0x04,0x3e,0x04,0x39,0x04,
	0x09,0x04,0x39,0xc4,0x40,0x24,0x40,0x24,0x39,0xf4,0x09,0x0e,0x09,0x0e,
	0x06,0x0e,0x00,0x00,
	0x00,0x00,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x38,0xf8,0x39,0xf8,0x36,0xf8,
	0x06,0xf8,0x06,0x38,0x3f,0xd8,0x3f,0xd8,0x06,0x08,0x06,0x0e,0x06,0x0e,
	0x00,0x0e,0x00,0x00,
};

static UBYTE localdata[] =
{
	0x00,0x00,0x18,0x00,0x3c,0x00,0x7e,0x00,0x18,0x00,0x1b,0xe0,0x19,0xe0,
	0x19,0xe0,0x1b,0xe0,0x1f,0x28,0x1e,0x0c,0x1f,0xfe,0x1f,0xfe,0x00,0x0c,
	0x00,0x08,0x00,0x00,
};

static UBYTE tapefirstdata[] =
{
	0x00,0x00,0x78,0x42,0x48,0xc6,0x49,0x4a,0x4a,0x52,0x4c,0x62,0x48,0x42,
	0x48,0x42,0x48,0x42,0x48,0x42,0x4c,0x62,0x4a,0x52,0x49,0x4a,0x48,0xc6,
	0x78,0x42,0x00,0x00,
	0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x84,0x31,0x8c,0x33,0x9c,0x37,0xbc,
	0x37,0xbc,0x37,0xbc,0x37,0xbc,0x33,0x9c,0x31,0x8c,0x30,0x84,0x30,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE tapeprevdata[] =
{
	0x00,0x00,0x01,0x02,0x03,0x06,0x05,0x0a,0x09,0x12,0x11,0x22,0x21,0x42,
	0x41,0x82,0x41,0x82,0x21,0x42,0x11,0x22,0x09,0x12,0x05,0x0a,0x03,0x06,
	0x01,0x02,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x06,0x0c,0x0e,0x1c,0x1e,0x3c,
	0x3e,0x7c,0x3e,0x7c,0x1e,0x3c,0x0e,0x1c,0x06,0x0c,0x02,0x04,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE tapestopdata[] =
{
	0x00,0x00,0x7f,0xfe,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,
	0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,
	0x7f,0xfe,0x00,0x00,
	0x00,0x00,0x00,0x00,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,
	0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,0x3f,0xfc,
	0x00,0x00,0x00,0x00,
};

static UBYTE tapeplaydata[] =
{
	0x00,0x00,0x10,0x00,0x1c,0x00,0x12,0x00,0x11,0x80,0x10,0x40,0x10,0x30,
	0x10,0x08,0x10,0x08,0x10,0x30,0x10,0x40,0x11,0x80,0x12,0x00,0x1c,0x00,
	0x10,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x0e,0x00,0x0f,0x80,0x0f,0xc0,
	0x0f,0xf0,0x0f,0xf0,0x0f,0xc0,0x0f,0x80,0x0e,0x00,0x0c,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE tapenextdata[] =
{
	0x00,0x00,0x40,0x80,0x60,0xc0,0x50,0xa0,0x48,0x90,0x44,0x88,0x42,0x84,
	0x41,0x82,0x41,0x82,0x42,0x84,0x44,0x88,0x48,0x90,0x50,0xa0,0x60,0xc0,
	0x40,0x80,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x30,0x60,0x38,0x70,0x3c,0x78,
	0x3e,0x7c,0x3e,0x7c,0x3c,0x78,0x38,0x70,0x30,0x60,0x20,0x40,0x00,0x00,
	0x00,0x00,0x00,0x00,
};

static UBYTE tapelastdata[] =
{
	0x00,0x00,0x42,0x1e,0x63,0x12,0x52,0x92,0x4a,0x52,0x46,0x32,0x42,0x12,
	0x42,0x12,0x42,0x12,0x42,0x12,0x46,0x32,0x4a,0x52,0x52,0x92,0x63,0x12,
	0x42,0x1e,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x0c,0x21,0x0c,0x31,0x8c,0x39,0xcc,0x3d,0xec,
	0x3d,0xec,0x3d,0xec,0x3d,0xec,0x39,0xcc,0x31,0x8c,0x21,0x0c,0x00,0x0c,
	0x00,0x00,0x00,0x00,
};


#pragma fast

struct Image newimage =
{
	0,0,16,16,2,(UWORD*)&newdata,0x03,0,NULL
};
struct Image loadimage =
{
	0,0,16,16,2,(UWORD*)&loaddata,0x03,0,NULL
};
struct Image saveimage =
{
	0,0,16,16,2,(UWORD*)&savedata,0x03,0,NULL
};
struct Image frontimage =
{
	0,0,16,16,2,(UWORD*)&frontdata,0x02,0,NULL
};
struct Image rightimage =
{
	0,0,16,16,2,(UWORD*)&rightdata,0x02,0,NULL
};
struct Image topimage =
{
	0,0,16,16,2,(UWORD*)&topdata,0x02,0,NULL
};
struct Image perspimage =
{
	0,0,16,16,2,(UWORD*)&perspdata,0x02,0,NULL
};
struct Image cameraimage =
{
	0,0,16,16,2,(UWORD*)&cameradata,0x02,0,NULL
};
struct Image fourimage =
{
	0,0,16,16,2,(UWORD*)&fourdata,0x03,0,NULL
};
struct Image boundingimage =
{
	0,0,16,16,2,(UWORD*)&boundingdata,0x02,0,NULL
};
struct Image wireimage =
{
	0,0,16,16,2,(UWORD*)&wiredata,0x02,0,NULL
};
struct Image solidimage =
{
	0,0,16,16,2,(UWORD*)&soliddata,0x03,0,NULL
};
struct Image rotateimage =
{
	0,0,16,16,2,(UWORD*)&rotatedata,0x02,0,NULL
};
struct Image moveimage =
{
	0,0,16,16,2,(UWORD*)&movedata,0x02,0,NULL
};
struct Image scaleimage =
{
	0,0,16,16,2,(UWORD*)&scaledata,0x02,0,NULL
};
struct Image worldmoveimage =
{
	0,0,16,16,2,(UWORD*)&worldmovedata,0x03,0,NULL
};
struct Image worldrotateimage =
{
	0,0,16,16,2,(UWORD*)&worldrotatedata,0x03,0,NULL
};
struct Image worldscaleimage =
{
	0,0,16,16,2,(UWORD*)&worldscaledata,0x03,0,NULL
};
struct Image ximage =
{
	0,0,16,16,2,(UWORD*)&xdata,0x02,0,NULL
};
struct Image yimage =
{
	0,0,16,16,2,(UWORD*)&ydata,0x02,0,NULL
};
struct Image zimage =
{
	0,0,16,16,2,(UWORD*)&zdata,0x02,0,NULL
};
struct Image viewimage =
{
	0,0,16,12,2,(UWORD*)&viewdata,0x03,0,NULL
};
struct Image rectangleimage =
{
	0,0,16,16,2,(UWORD*)&rectangledata,0x02,0,NULL
};
struct Image editpointsimage =
{
	0,0,16,16,2,(UWORD*)&editpointsdata,0x03,0,NULL
};
struct Image addpointsimage =
{
	0,0,16,16,2,(UWORD*)&addpointsdata,0x03,0,NULL
};
struct Image editedgesimage =
{
	0,0,16,16,2,(UWORD*)&editedgesdata,0x03,0,NULL
};
struct Image addedgesimage =
{
	0,0,16,16,2,(UWORD*)&addedgesdata,0x03,0,NULL
};
struct Image editfacesimage =
{
	0,0,16,16,2,(UWORD*)&editfacesdata,0x03,0,NULL
};
struct Image addfacesimage =
{
	0,0,16,16,2,(UWORD*)&addfacesdata,0x03,0,NULL
};
struct Image localimage =
{
	0,0,16,16,2,(UWORD*)&localdata,0x02,0,NULL
};
struct Image tapefirstimage =
{
	0,0,16,16,2,(UWORD*)&tapefirstdata,0x03,0,NULL
};
struct Image tapeprevimage =
{
	0,0,16,16,2,(UWORD*)&tapeprevdata,0x03,0,NULL
};
struct Image tapestopimage =
{
	0,0,16,16,2,(UWORD*)&tapestopdata,0x03,0,NULL
};
struct Image tapeplayimage =
{
	0,0,16,16,2,(UWORD*)&tapeplaydata,0x03,0,NULL
};
struct Image tapenextimage =
{
	0,0,16,16,2,(UWORD*)&tapenextdata,0x03,0,NULL
};
struct Image tapelastimage =
{
	0,0,16,16,2,(UWORD*)&tapelastdata,0x03,0,NULL
};

/*************
 * DESCRIPTION:   do a new for superclass
 * INPUT:         cl       class
 *                obj      object
 *                tag1...  tags
 * OUTPUT:
 *************/
#ifndef __PPC__
ULONG DoSuperNew(struct IClass *cl,Object *obj,ULONG tag1,...)
{
	return(DoSuperMethod(cl,obj,OM_NEW,&tag1,NULL));
}
#endif

/*************
 * DESCRIPTION:   get attribute of object
 * INPUT:         obj         object
 *                attribute   attribute
 * OUTPUT:        value
 *************/
LONG xget(Object *obj,ULONG attribute)
{
	ULONG x;

	GetAttr(attribute,obj,&x);
	return(x);
}

/*************
 * DESCRIPTION:   Converts float value to a string and removes trailing zeros
 * INPUT:         value       value to convert
 *                str         result string
 * OUTPUT:        -
 *************/
void Float2String(const float v,char *str)
{
	int i;

	sprintf(str, "%.4f", v);
	i = strlen(str) - 1;
	while(str[i] == '0') // remove all trailing zeros
	{
			str[i] = 0;
			i--;
	}
	if(str[i] == '.')    // also remove '.' if no numbers left
		str[i] = 0;
}

/*************
 * DESCRIPTION:   Sets the color of a color field
 * INPUT:         cf       color field to set
 *                color    color to set to
 * OUTPUT:        -
 *************/
void SetColorField(Object *cf, COLOR *color)
{
	ULONG t;
	ULONG red,green,blue;

#ifdef __STORM__
	t = (ULONG)(color->r*255.f);
#else
	t = (ULONG)(color->r*255.f+.5f);
#endif
	red = t + (t<<8) + (t<<16) + (t<<24);
#ifdef __STORM__
	t = (ULONG)(color->g*255.f);
#else
	t = (ULONG)(color->g*255.f+.5f);
#endif
	green = t + (t<<8) + (t<<16) + (t<<24);
#ifdef __STORM__
	t = (ULONG)(color->b*255.f);
#else
	t = (ULONG)(color->b*255.f+.5f);
#endif
	blue = t + (t<<8) + (t<<16) + (t<<24);
	SetAttrs(cf, MUIA_Colorfield_Red, red,
		MUIA_Colorfield_Green, green,
		MUIA_Colorfield_Blue, blue, TAG_DONE);
}

/*************
 * DESCRIPTION:   Gets the color of a color field
 * INPUT:         cf       color field to set
 *                color    color to set to
 * OUTPUT:        -
 *************/
void GetColorField(Object *cf, COLOR *color)
{
	ULONG col;

	GetAttr(MUIA_Colorfield_Red,cf,&col);
	color->r = float(col>>24)/255.f;
	GetAttr(MUIA_Colorfield_Green,cf,&col);
	color->g = float(col>>24)/255.f;
	GetAttr(MUIA_Colorfield_Blue,cf,&col);
	color->b = float(col>>24)/255.f;
}

/*************
 * DESCRIPTION:   view a picture with preslected viewer
 * INPUT:         obj      MUI object
 *                file     file to view
 * OUTPUT:        -
 *************/
void ViewPicture(Object *obj, char *file)
{
	char buffer[256];
	PREFS p;
	LONG err;

	if(!strlen(file))
	{
		utility.Request("No picture specified.");
		return;
	}

	p.id = ID_VIEW;
	if(!p.GetPrefs())
	{
		utility.Request("No viewer specified.\nUse 'Settings/Prefs' to set the viewer.");
		return;
	}

	sprintf(buffer, "run %s \"%s\"", p.data, file);
	p.data = NULL;
	err = SystemTags(buffer, TAG_DONE);
	if(err)
	{
		Fault(err, "Unable to start viewer", buffer, 255);
		utility.Request(buffer);
		return;
	}
}

/*************
 * DESCRIPTION:   replacement of V39 FreeBitMap()
 * INPUT:         bm    bitmap
 * OUTPUT:        -
 *************/
void NewFreeBitMap(struct BitMap *bm)
{
	int i;

	if(bm)
	{
		for(i=0; i<bm->Depth; i++)
		{
			if(bm->Planes[i])
				FreeRaster(bm->Planes[i], bm->BytesPerRow, bm->Rows);
		}
		delete bm;

	}
}

/*************
 * DESCRIPTION:   replacement of V39 AllocBitMap()
 * INPUT:         width,height,depth
 * OUTPUT:        bitmap
 *************/
struct BitMap *NewAllocBitMap(int width, int height, int depth)
{
	int i;
	struct BitMap *bm;

	bm = new struct BitMap;
	if(!bm)
		return 0;
	InitBitMap(bm, width, height, depth);
	for(i=0; i<depth; i++)
	{
		bm->Planes[i] = (PLANEPTR)AllocRaster(width, height);
		if(!bm->Planes[i])
		{
			NewFreeBitMap(bm);
			return 0;
		}
	}

	return bm;
}
